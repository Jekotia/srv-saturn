#! /bin/bash
VER_NUM="1.0"
VER_DATE="May 10th, 2018"

imagePrefix="jekotia"

function _usage () {
	echo "This is a simple script for consistently building Docker images with the command:"
	echo "	docker build -t TAG DIRECTORY"
	echo "	docker build -t TAG DIRECTORY test"
	echo "Authored by Josh 'Jekotia' Ameli, v${VER_NUM} ${VER_DATE}"
	echo
	echo "First argument MUST be a path to a directory".
	echo "Any subsequent arguments are appended to the \`docker build\` command."
	echo "e.g. \`docker-build ../php\` would run the native Docker command \`docker build -t ${imagePrefix}/php ../php\`"
}

function _build () {
	echo
	echo "Building '${imageTag}' from '$DIR'"
	if docker build -t $imageTag $DIR $@ ; then
		echo
		echo "Finished building '${imageTag}' from '$DIR'"
		docker push $imageTag
		buildStatus="$?"
	else
		buildStatus="$?"
		echo
	fi

	exit $buildStatus
}

if [[ "$1" == "" ]] ; then
	_usage
	exit 1

elif [[ "$1" == "--help" || "$1" == "-h" ]] ; then
	_usage

elif	cd "$1" > /dev/null 2>&1 ; then # See if we can change to the target Dockerfile directory
	shift

	# Save the full path of our new location to a variable. We'll need to manipulate this string a little
	# This allows us to maintain full functionality even when someone runs `docker-build ./`
	DIR="`pwd`"
	# Derive the image name from the directory the Dockerfile resides within
	imageName="`basename $DIR`"
	# Prepend the image name with '${imagePrefix}/' to get the tag
	if [[ "$1" == "test" ]] ; then
		imageTag="${imagePrefix}/test:${imageName}"
		shift
		test="true"
	else
		imageTag="${imagePrefix}/${imageName}"
		test="false"
	fi
	echo "===================== Build parameters ====================="
	echo "| DIR       =  $DIR"
	echo "| imageName =  $imageName"
	echo "| imageTag  =  $imageTag"
	echo "============================================================"

	_build $@
else
	echo "Oops! Looks like you specified a directory that doesn't exist."
	exit 5
fi

exit 0
