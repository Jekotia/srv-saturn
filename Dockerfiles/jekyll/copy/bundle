#!/bin/sh
[ "$DEBUG" = "true" ] && set -x
set -e

# --
# We don't need to run if there is no Gemfile.
# We should just bail out and leave this place for
#   we are nothing but a problem from here.
# --
if [ ! -f "Gemfile" ]; then
  exit 0
fi

# --
# This can happen sometimes, this mostly happens when
# the user has either 1.) set their own USER= which is not
# what we want, or if inside of `jekyll new` because
# Jekyll will simply call `bundle`
# --
if [ "$(id -u)" != "0" ]; then
   exec $GEM_BIN/bundle "$@"
fi



# --
# Make sure we have permissions.
# --
if [ "$1" = "install" ] || [ "$1" = "clean" ] || [ "$1" = "update" ]; then
  if [ "$(stat -c '%U' $BUNDLE_HOME)" != "jekyll" ]; then
    chown -R jekyll:jekyll $BUNDLE_HOME
  fi
fi


# --
exe=$GEM_BIN/bundle
if [ "$1" = "install" ] || [ "$1" = "update" ]; then
  # There is no need to report that we are using check.
  if [ "$1" = "update" ] || ! su-exec jekyll $exe check 1>/dev/null 2>&1; then
    if [ ! -f "/updated" ] && connected && [ -f ".apk" ]; then
      apk add --no-cache --no-progress \
        $(cat .apk)
    fi

    su-exec jekyll $exe config jobs 2
    su-exec jekyll $exe config ignore_messages true
    su-exec jekyll $exe config build.nokogiri --use-system-libraries
    su-exec jekyll $exe config disable_version_check true
    unset DEBUG; su-exec jekyll $exe "$@"
    su-exec jekyll $exe clean
  fi
else
  su-exec jekyll $exe "$@"
fi
